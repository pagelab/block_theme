# .cursorrules – Projeto Pinegrow → WordPress (Semantic Colors)

project:
  name: Block Theme Pinegrow Semantic Colors
  description: >
    Script Node.js para converter classes Tailwind hardcoded em tokens semânticos,
    atualizando theme.json, arquivos CSS e arquivos PHP do tema de bloco.
  goals:
    - Garantir controle de cores via Global Styles (theme.json).
    - Remover dependência de cores Tailwind hardcoded.
    - Preservar compatibilidade com WordPress e Tailwind.
    - Substituir variáveis Tailwind (--tw-*) por tokens definidos no theme.json.

rules:

  # -------------------------
  # Pipeline de execução
  # -------------------------
  - match: "_tools/semantic-colors.js"
    instructions:
      - O script deve rodar com **um único comando**: `node _tools/semantic-colors.js`.
      - Internamente, organizar a execução em etapas claras (pipeline):
        1. `processThemeJson()`
        2. `processCss()`
        3. `processPhp()`
        4. `logResults()`
        5. `validateBuild()`
      - Cada etapa deve ter seu próprio try/catch e log.
      - O pipeline deve parar em caso de erro crítico, mas manter logs do que já foi feito.
      - O usuário deve poder rodar uma etapa isolada com flags (ex: `--css`, `--php`), útil para depuração.

  # -------------------------
  # Manipulação de theme.json
  # -------------------------
  - match: "theme.json"
    instructions:
      - Sempre parsear com JSON.parse e regravar com JSON.stringify(..., null, 2).
      - Remover a paleta completa do Tailwind.
      - Adicionar paleta semântica conforme tokens definidos abaixo.
      - Nunca usar regex em JSON.
      - Preservar equivalência RGB no mapeamento.

  # -------------------------
  # Manipulação de CSS (tailwind_theme)
  # -------------------------
  - match: "tailwind_theme/**/*.css"
    instructions:
      - Sempre usar PostCSS para parsing/manipulação.
      - Substituir seletores de cor do Tailwind pelos tokens semânticos (ex: .bg-blue-700 → .brand-bg-base).
      - Substituir valores de `background-color`, `color`, `border-color` etc. por variáveis `var(--wp--preset--color--TOKEN)`.
      - Remover referências a `--tw-bg-opacity`.
      - Preservar pseudo-classes e media queries.
      - Substituir todas as variáveis `--tw-prose-*` para tokens definidos no theme.json (com fallback + progressive enhancement).
      - Nunca usar regex em CSS.

    prose-variable-mapping:
      fallbacks:
        --tw-prose-body: var(--wp--preset--color--text-base)
        --tw-prose-headings: var(--wp--preset--color--text-base)
        --tw-prose-lead: var(--wp--preset--color--text-base)
        --tw-prose-links: var(--wp--preset--color--link)
        --tw-prose-bold: var(--wp--preset--color--text-base)
        --tw-prose-counters: var(--wp--preset--color--text-base)
        --tw-prose-bullets: var(--wp--preset--color--text-base)
        --tw-prose-hr: var(--wp--preset--color--border-subtle)
        --tw-prose-quotes: var(--wp--preset--color--text-base)
        --tw-prose-quote-borders: var(--wp--preset--color--border-base)
        --tw-prose-captions: var(--wp--preset--color--text-base)
        --tw-prose-kbd: var(--wp--preset--color--text-base)
        --tw-prose-kbd-shadows: 17 24 39
        --tw-prose-code: var(--wp--preset--color--text-base)
        --tw-prose-pre-code: var(--wp--preset--color--text-base)
        --tw-prose-pre-bg: var(--wp--preset--color--bg-inverse)
        --tw-prose-th-borders: var(--wp--preset--color--border-subtle)
        --tw-prose-td-borders: var(--wp--preset--color--border-subtle)

        --tw-prose-invert-body: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-headings: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-lead: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-links: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-bold: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-counters: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-bullets: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-hr: var(--wp--preset--color--border-inverse-subtle)
        --tw-prose-invert-quotes: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-quote-borders: var(--wp--preset--color--border-inverse)
        --tw-prose-invert-captions: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-kbd: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-kbd-shadows: 255 255 255
        --tw-prose-invert-code: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-pre-code: var(--wp--preset--color--text-inverse)
        --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%)
        --tw-prose-invert-th-borders: var(--wp--preset--color--border-inverse-subtle)
        --tw-prose-invert-td-borders: var(--wp--preset--color--border-inverse-subtle)

      overrides:
        --tw-prose-headings: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-lead: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-bullets: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-quotes: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-captions: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-kbd: color-mix(in srgb, var(--wp--preset--color--text-base) 60%, white)
        --tw-prose-code: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-pre-code: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)
        --tw-prose-pre-bg: color-mix(in srgb, var(--wp--preset--color--text-base) 70%, white)

        --tw-prose-invert-headings: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-lead: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-links: color-mix(in srgb, var(--wp--preset--color--text-inverse) 60%, white)
        --tw-prose-invert-bold: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-counters: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-bullets: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-quotes: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-quote-borders: color-mix(in srgb, var(--wp--preset--color--text-inverse) 50%, white)
        --tw-prose-invert-captions: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)
        --tw-prose-invert-code: color-mix(in srgb, var(--wp--preset--color--text-inverse) 50%, white)
        --tw-prose-invert-pre-code: color-mix(in srgb, var(--wp--preset--color--text-inverse) 70%, white)

  # -------------------------
  # Manipulação de PHP (blocos)
  # -------------------------
  - match: "blocks/**/*.php"
    instructions:
      - Localizar atributos class="..." com regex restrita:
        regex: class\s*=\s*"([^"]+)"
      - Tokenizar as classes (split por espaço) e substituir somente aquelas no dicionário SEMANTIC_TOKEN_MAPPING.
      - Regravar mantendo o restante da linha intocado.
      - Nunca tentar interpretar ou reformatar o código PHP além dos atributos class.
      - Não substituir strings PHP dinâmicas.

  # -------------------------
  # Logging
  # -------------------------
  - match: "_tools/semantic-colors.js"
    instructions:
      - Gerar logs detalhados em `_tools/logs/semantic-colors-[timestamp].md`.
      - Para cada substituição, registrar antes/depois.
      - Criar backups `.bak` antes de sobrescrever arquivos originais.

  # -------------------------
  # Restrições do Pinegrow
  # -------------------------
  - match: "**/*.php"
    instructions:
      - Nunca modificar `functions.php` (ele é sobrescrito pelo Pinegrow).
      - Customizações adicionais de PHP só podem ser adicionadas em `inc/custom.php`.
      - Ao criar novos blocos, registrar via `PG_Blocks_v3`.
      - Não incluir arquivos aleatórios na raiz do projeto.

  # -------------------------
  # Testes
  # -------------------------
  - match: "_tools/semantic-colors.js"
    instructions:
      - Sempre solicitar ao usuário que exporte novamente o tema a partir do Pinegrow **antes de rodar testes**.
      - Os testes devem ser realizados apenas sobre a versão "limpa" (exportada diretamente do Pinegrow).
      - Nunca rodar testes em cima da versão já processada pelo script, para evitar confusão ou regressões.

dependencies:
  - postcss
  - glob or fast-glob
  - fs-extra
  - (opcional) cssnano para minificação

style:
  - Seguir padrão ES6+.
  - Evitar libs externas não listadas.
  - Comentários no código devem explicar decisões de parsing.
  - Minificar e otimizar scripts e estilos no build final.
  - Validar e sanitizar entradas quando aplicável.

semantic-token-mapping:
  bg-blue-700: brand-bg-base
  bg-green-600: brand-bg-alt
  bg-red-600: brand-bg-accent
  text-blue-700: brand-text-base
  text-green-600: brand-text-alt
  text-red-600: brand-text-accent
  bg-white: bg-base
  bg-gray-200: bg-subtle
  bg-gray-950: bg-inverse
  bg-gray-900: bg-inverse-subtle
  text-gray-900: text-base
  text-gray-800: text-subtle
  text-gray-50: text-inverse
  text-gray-300: text-inverse-subtle
  border-gray-400: border-base
  border-gray-150: border-subtle
  bg-green-200: bg-success
  bg-yellow-200: bg-warning
  bg-red-200: bg-error
  bg-blue-200: bg-info
  bg-blue-600: button-base
  bg-transparent: button-inverse
  bg-red-500: button-accent
  bg-gray-250: card
